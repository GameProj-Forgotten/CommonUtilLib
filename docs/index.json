{
  "api/CommonUtilLib.ThreadSafe.SingleTon-1.html": {
    "href": "api/CommonUtilLib.ThreadSafe.SingleTon-1.html",
    "title": "Class SingleTon<_T> | CommonUtilLib",
    "keywords": "Class SingleTon<_T> Namespace CommonUtilLib.ThreadSafe Assembly CommonUtilLib.dll General thread safe singleton class public class SingleTon<_T> : IDisposable where _T : class, IDisposable, new() Type Parameters _T Inheritance object SingleTon<_T> Implements IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Instance Get the instance of the singleton class public static _T Instance { get; } Property Value _T Methods Dispose() Dispose the instance of the singleton class public void Dispose() ~SingleTon() protected ~SingleTon()"
  },
  "api/CommonUtilLib.ThreadSafe.SingleTonForGameObject-1.html": {
    "href": "api/CommonUtilLib.ThreadSafe.SingleTonForGameObject-1.html",
    "title": "Class SingleTonForGameObject<_T> | CommonUtilLib",
    "keywords": "Class SingleTonForGameObject<_T> Namespace CommonUtilLib.ThreadSafe Assembly CommonUtilLib.dll public class SingleTonForGameObject<_T> : MonoBehaviour where _T : class Type Parameters _T Inheritance object Object Component Behaviour MonoBehaviour SingleTonForGameObject<_T> Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.didStart MonoBehaviour.didAwake MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.CompareTag(TagHandle) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Properties Instance public static _T Instance { get; } Property Value _T Methods SetInstance(in _T) public static void SetInstance(in _T instance) Parameters instance _T"
  },
  "api/CommonUtilLib.ThreadSafe.html": {
    "href": "api/CommonUtilLib.ThreadSafe.html",
    "title": "Namespace CommonUtilLib.ThreadSafe | CommonUtilLib",
    "keywords": "Namespace CommonUtilLib.ThreadSafe Classes SingleTonForGameObject<_T> SingleTon<_T> General thread safe singleton class"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | CommonUtilLib",
    "keywords": "Getting Started This library is written assuming that it will be used in the form of a dll. Therefore, it can be applied generally by referencing the dll to the project. However, if you want a detailed official manual, please refer to the following materials: .Net - Manage references in a project Unity - Integrating third-party code libraries (plug-ins)"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | CommonUtilLib",
    "keywords": "Introduction CommonUtilLib is a basic library that aims to collect basic utilities commonly used throughout the Forgotten project. Please note that this library is built based on .Net Framework 4.8. The representative functions provided by this library are as follows: CommonUtilLib └── ThreadSafe └── class SingleTon<_T> : IDisposable where _T : class, IDisposable, new() └── class SingleTonForGameObject<_T> : MonoBehaviour where _T : class"
  },
  "index.html": {
    "href": "index.html",
    "title": "| CommonUtilLib",
    "keywords": "CommonUtilLib Abstract This library contains common utilities used in the Forgotten project Each function is organized into thread-safe and non-thread-safe versions Features Thread Safe SingleTon SingleTonForGameObject Usage [!IMPORTANT] This project is for UI development in .Net Framework Dependency None Releases"
  }
}